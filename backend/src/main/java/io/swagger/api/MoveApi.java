/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.36).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.DeleteMoveResponse;
import io.swagger.model.MoveListResponse;
import io.swagger.model.MoveResponse;
import io.swagger.model.MoveSearchBody;
import io.swagger.model.PokedexMoveBody;
import io.swagger.model.PutMoveBody;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2025-08-14T20:34:58.722562253+02:00[Europe/Paris]")
@Validated
public interface MoveApi {

    @Operation(summary = "Delete a move knowing its name", description = "", tags={ "move" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "", content = @Content(mediaType = "application/json", schema = @Schema(implementation = DeleteMoveResponse.class))) })
    @RequestMapping(value = "/v1/pokedex/move/{name}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<DeleteMoveResponse> deleteMove(@Parameter(in = ParameterIn.PATH, description = "name of the Pokemon to delete", required=true, schema=@Schema()) @PathVariable("name") String name);


    @Operation(summary = "Get a specific move", description = "", tags={ "Move" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "", content = @Content(mediaType = "application/json", schema = @Schema(implementation = MoveResponse.class))) })
    @RequestMapping(value = "/v1/pokedex/move/{name}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<MoveResponse> getMove(@Parameter(in = ParameterIn.PATH, description = "Name of the move to get", required=true, schema=@Schema()) @PathVariable("name") String name);


    @Operation(summary = "Create a new move", description = "Add a new move to the db.", tags={ "Move" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Move created successfully", content = @Content(mediaType = "application/json", schema = @Schema(implementation = MoveResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid input") })
    @RequestMapping(value = "/v1/pokedex/move",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<MoveResponse> postMoveCreate(@Parameter(in = ParameterIn.DEFAULT, description = "Move object that needs to be added", schema=@Schema()) @Valid @RequestBody PokedexMoveBody body);


    @Operation(summary = "Search moves", description = "Search moves (by names) from the db.", tags={ "Move" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Move found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = MoveListResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid input") })
    @RequestMapping(value = "/v1/pokedex/move/search",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<MoveListResponse> postMoveSearch(@Parameter(in = ParameterIn.DEFAULT, description = "String containing the names", schema=@Schema()) @Valid @RequestBody MoveSearchBody body);


    @Operation(summary = "Modify a specific move", description = "", tags={ "Move" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Pokemon modified", content = @Content(mediaType = "application/json", schema = @Schema(implementation = MoveResponse.class))) })
    @RequestMapping(value = "/v1/pokedex/move/{name}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<MoveResponse> putMove(@Parameter(in = ParameterIn.PATH, description = "Name of the move", required=true, schema=@Schema()) @PathVariable("name") String name, @Parameter(in = ParameterIn.DEFAULT, description = "Pokemon object that needs to be modified", schema=@Schema()) @Valid @RequestBody PutMoveBody body);

}

