/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { deletePokemon } from '../fn/pokemon/delete-pokemon';
import { DeletePokemon$Params } from '../fn/pokemon/delete-pokemon';
import { getAllPokemon } from '../fn/pokemon/get-all-pokemon';
import { GetAllPokemon$Params } from '../fn/pokemon/get-all-pokemon';
import { getPokemon } from '../fn/pokemon/get-pokemon';
import { GetPokemon$Params } from '../fn/pokemon/get-pokemon';
import { Move } from '../models/move';
import { Pokemon } from '../models/pokemon';
import { postPokemonCreate } from '../fn/pokemon/post-pokemon-create';
import { PostPokemonCreate$Params } from '../fn/pokemon/post-pokemon-create';

@Injectable({ providedIn: 'root' })
export class PokemonService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getAllPokemon()` */
  static readonly GetAllPokemonPath = '/v1/pokedex/pokemon';

  /**
   * Get all pokemon.
   *
   * Get all pokemon from the db, using a pagination. The default limit of pokemon per page is 50
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllPokemon()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllPokemon$Response(params?: GetAllPokemon$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Pokemon>>> {
    return getAllPokemon(this.http, this.rootUrl, params, context);
  }

  /**
   * Get all pokemon.
   *
   * Get all pokemon from the db, using a pagination. The default limit of pokemon per page is 50
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllPokemon$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllPokemon(params?: GetAllPokemon$Params, context?: HttpContext): Observable<Array<Pokemon>> {
    return this.getAllPokemon$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Pokemon>>): Array<Pokemon> => r.body)
    );
  }

  /** Path part for operation `postPokemonCreate()` */
  static readonly PostPokemonCreatePath = '/v1/pokedex/pokemon';

  /**
   * Create a new pokemon.
   *
   * Add a new pokemon to the db.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `postPokemonCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  postPokemonCreate$Response(params?: PostPokemonCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<Pokemon>> {
    return postPokemonCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * Create a new pokemon.
   *
   * Add a new pokemon to the db.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `postPokemonCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  postPokemonCreate(params?: PostPokemonCreate$Params, context?: HttpContext): Observable<Pokemon> {
    return this.postPokemonCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<Pokemon>): Pokemon => r.body)
    );
  }

  /** Path part for operation `getPokemon()` */
  static readonly GetPokemonPath = '/v1/pokedex/pokemon/{entryNumber}';

  /**
   * Get a specific pokemon and its related resources.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getPokemon()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPokemon$Response(params: GetPokemon$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'pokemon'?: Pokemon;
'moves'?: Array<Move>;
'evolutions'?: Array<Pokemon>;
}>> {
    return getPokemon(this.http, this.rootUrl, params, context);
  }

  /**
   * Get a specific pokemon and its related resources.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getPokemon$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPokemon(params: GetPokemon$Params, context?: HttpContext): Observable<{
'pokemon'?: Pokemon;
'moves'?: Array<Move>;
'evolutions'?: Array<Pokemon>;
}> {
    return this.getPokemon$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'pokemon'?: Pokemon;
'moves'?: Array<Move>;
'evolutions'?: Array<Pokemon>;
}>): {
'pokemon'?: Pokemon;
'moves'?: Array<Move>;
'evolutions'?: Array<Pokemon>;
} => r.body)
    );
  }

  /** Path part for operation `deletePokemon()` */
  static readonly DeletePokemonPath = '/v1/pokedex/pokemon/{entryNumber}';

  /**
   * Delete a pokemon knowing its entryNumber.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deletePokemon()` instead.
   *
   * This method doesn't expect any request body.
   */
  deletePokemon$Response(params: DeletePokemon$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'message'?: string;
}>> {
    return deletePokemon(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete a pokemon knowing its entryNumber.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deletePokemon$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deletePokemon(params: DeletePokemon$Params, context?: HttpContext): Observable<{
'message'?: string;
}> {
    return this.deletePokemon$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'message'?: string;
}>): {
'message'?: string;
} => r.body)
    );
  }

}
